#pragma once

#include <cstdint>
#include "memory.h"
#include "registers.h"

namespace GameBoy {

constexpr uint8_t MASK_ZERO = 1 << 7;
constexpr uint8_t MASK_SUBTRACT = 1 << 6; // Also known as the 'N' flag
constexpr uint8_t MASK_HALF_CARRY = 1 << 5; // For a carry from bit 3-4 or 11-12
constexpr uint8_t MASK_CARRY = 1 << 4;

class CPU {
public:
    CPU(Memory memory) : memory{memory} {}
    void print_register_values() const;
    void execute_instruction(uint8_t opcode);

private:
    Memory memory;
    Registers<std::endian::native> registers;
    uint64_t cycles_elapsed{};
    bool is_stopped{};
    bool is_halted{};
    bool are_interrupts_enabled{};

    using Instruction = void (CPU::*)();
    static const Instruction instruction_table[256];
    static const Instruction prefixed_instruction_table[256];

    // Instruction Helpers
    void set_flags(bool set_zero, bool set_subtract, bool set_half_carry, bool set_carry);
    void load_register8_register8(uint8_t &destination, const uint8_t &source);
    void load_register8_immediate8(uint8_t &destination);
    void load_register8_memory_register16(uint8_t &destination, const uint16_t &source_address);
    void load_memory_register16_register8(const uint16_t &destination_address, const uint8_t &source);
    void load_register16_immediate16(uint16_t &destination);
    void increment_register8(uint8_t &register8);
    void decrement_register8(uint8_t &register8);
    void increment_register16(uint16_t &register16);
    void decrement_register16(uint16_t &register16);
    void add_hl_register16(const uint16_t &register16);
    void add_a_uint8(const uint8_t &value, bool is_register_input = true);
    void add_with_carry_a_uint8(const uint8_t &value, bool is_register_input = true);
    void subtract_a_uint8(const uint8_t &value, bool is_register_input = true);
    void subtract_with_carry_a_uint8(const uint8_t &value, bool is_register_input = true);
    void and_a_uint8(const uint8_t &value, bool is_register_input = true);
    void xor_a_uint8(const uint8_t &value, bool is_register_input = true);
    void or_a_uint8(const uint8_t &value, bool is_register_input = true);
    void compare_a_uint8(const uint8_t &value, bool is_register_input = true);
    void jump_relative_condition_signed_immediate8(bool is_condition_met);
    void jump_condition_immediate16(bool is_condition_met);
    void call_condition_immediate16(bool is_condition_met);
    void return_condition(bool is_condition_met);
    void push_register16(const uint16_t &register16);
    void pop_register16(uint16_t &register16);
    void restart_address(uint16_t address);

    // Instructions suffixed with their opcode
    void unknown_opcode();
    void no_operation_0x00();
    void load_bc_immediate16_0x01();
    void load_memory_bc_a_0x02();
    void increment_bc_0x03();
    void increment_b_0x04();
    void decrement_b_0x05();
    void load_b_immediate8_0x06();
    void rotate_left_circular_a_0x07();
    void load_memory_immediate16_stack_pointer_0x08();
    void add_hl_bc_0x09();
    void load_a_memory_bc_0x0a();
    void decrement_bc_0x0b();
    void increment_c_0x0c();
    void decrement_c_0x0d();
    void load_c_immediate8_0x0e();
    void rotate_right_circular_a_0x0f();
    void stop_immediate8_0x10();
    void load_de_immediate16_0x11();
    void load_memory_de_a_0x12();
    void increment_de_0x13();
    void increment_d_0x14();
    void decrement_d_0x15();
    void load_d_immediate8_0x16();
    void rotate_left_through_carry_a_0x17();
    void jump_relative_signed_immediate8_0x18();
    void add_hl_de_0x19();
    void load_a_memory_de_0x1a();
    void decrement_de_0x1b();
    void increment_e_0x1c();
    void decrement_e_0x1d();
    void load_e_immediate8_0x1e();
    void rotate_right_through_carry_a_0x1f();
    void jump_relative_not_zero_signed_immediate8_0x20();
    void load_hl_immediate16_0x21();
    void load_memory_hli_a_0x22();
    void increment_hl_0x23();
    void increment_h_0x24();
    void decrement_h_0x25();
    void load_h_immediate8_0x26();
    void decimal_adjust_a_0x27();
    void jump_relative_zero_signed_immediate8_0x28();
    void add_hl_hl_0x29();
    void load_a_memory_hli_0x2a();
    void decrement_hl_0x2b();
    void increment_l_0x2c();
    void decrement_l_0x2d();
    void load_l_immediate8_0x2e();
    void complement_a_0x2f();
    void jump_relative_not_carry_signed_immediate8_0x30();
    void load_stack_pointer_immediate16_0x31();
    void load_memory_hload_a_0x32();
    void increment_stack_pointer_0x33();
    void increment_memory_hl_0x34();
    void decrement_memory_hl_0x35();
    void load_memory_hl_immediate8_0x36();
    void set_carry_flag_0x37();
    void jump_relative_carry_signed_immediate8_0x38();
    void add_hl_stack_pointer_0x39();
    void load_a_memory_hload_0x3a();
    void decrement_stack_pointer_0x3b();
    void increment_a_0x3c();
    void decrement_a_0x3d();
    void load_a_immediate8_0x3e();
    void complement_carry_flag_0x3f();
    void load_b_b_0x40();
    void load_b_c_0x41();
    void load_b_d_0x42();
    void load_b_e_0x43();
    void load_b_h_0x44();
    void load_b_l_0x45();
    void load_b_memory_hl_0x46();
    void load_b_a_0x47();
    void load_c_b_0x48();
    void load_c_c_0x49();
    void load_c_d_0x4a();
    void load_c_e_0x4b();
    void load_c_h_0x4c();
    void load_c_l_0x4d();
    void load_c_memory_hl_0x4e();
    void load_c_a_0x4f();
    void load_d_b_0x50();
    void load_d_c_0x51();
    void load_d_d_0x52();
    void load_d_e_0x53();
    void load_d_h_0x54();
    void load_d_l_0x55();
    void load_d_memory_hl_0x56();
    void load_d_a_0x57();
    void load_e_b_0x58();
    void load_e_c_0x59();
    void load_e_d_0x5a();
    void load_e_e_0x5b();
    void load_e_h_0x5c();
    void load_e_l_0x5d();
    void load_e_memory_hl_0x5e();
    void load_e_a_0x5f();
    void load_h_b_0x60();
    void load_h_c_0x61();
    void load_h_d_0x62();
    void load_h_e_0x63();
    void load_h_h_0x64();
    void load_h_l_0x65();
    void load_h_memory_hl_0x66();
    void load_h_a_0x67();
    void load_l_b_0x68();
    void load_l_c_0x69();
    void load_l_d_0x6a();
    void load_l_e_0x6b();
    void load_l_h_0x6c();
    void load_l_l_0x6d();
    void load_l_memory_hl_0x6e();
    void load_l_a_0x6f();
    void load_memory_hl_b_0x70();
    void load_memory_hl_c_0x71();
    void load_memory_hl_d_0x72();
    void load_memory_hl_e_0x73();
    void load_memory_hl_h_0x74();
    void load_memory_hl_l_0x75();
    void halt_0x76();
    void load_memory_hl_a_0x77();
    void load_a_b_0x78();
    void load_a_c_0x79();
    void load_a_d_0x7a();
    void load_a_e_0x7b();
    void load_a_h_0x7c();
    void load_a_l_0x7d();
    void load_a_memory_hl_0x7e();
    void load_a_a_0x7f();
    void add_a_b_0x80();
    void add_a_c_0x81();
    void add_a_d_0x82();
    void add_a_e_0x83();
    void add_a_h_0x84();
    void add_a_l_0x85();
    void add_a_memory_hl_0x86();
    void add_a_a_0x87();
    void add_with_carry_a_b_0x88();
    void add_with_carry_a_c_0x89();
    void add_with_carry_a_d_0x8a();
    void add_with_carry_a_e_0x8b();
    void add_with_carry_a_h_0x8c();
    void add_with_carry_a_l_0x8d();
    void add_with_carry_a_memory_hl_0x8e();
    void add_with_carry_a_a_0x8f();
    void subtract_a_b_0x90();
    void subtract_a_c_0x91();
    void subtract_a_d_0x92();
    void subtract_a_e_0x93();
    void subtract_a_h_0x94();
    void subtract_a_l_0x95();
    void subtract_a_memory_hl_0x96();
    void subtract_a_a_0x97();
    void subtract_with_carry_a_b_0x98();
    void subtract_with_carry_a_c_0x99();
    void subtract_with_carry_a_d_0x9a();
    void subtract_with_carry_a_e_0x9b();
    void subtract_with_carry_a_h_0x9c();
    void subtract_with_carry_a_l_0x9d();
    void subtract_with_carry_a_memory_hl_0x9e();
    void subtract_with_carry_a_a_0x9f();
    void and_a_b_0xa0();
    void and_a_c_0xa1();
    void and_a_d_0xa2();
    void and_a_e_0xa3();
    void and_a_h_0xa4();
    void and_a_l_0xa5();
    void and_a_memory_hl_0xa6();
    void and_a_a_0xa7();
    void xor_a_b_0xa8();
    void xor_a_c_0xa9();
    void xor_a_d_0xaa();
    void xor_a_e_0xab();
    void xor_a_h_0xac();
    void xor_a_l_0xad();
    void xor_a_memory_hl_0xae();
    void xor_a_a_0xaf();
    void or_a_b_0xb0();
    void or_a_c_0xb1();
    void or_a_d_0xb2();
    void or_a_e_0xb3();
    void or_a_h_0xb4();
    void or_a_l_0xb5();
    void or_a_memory_hl_0xb6();
    void or_a_a_0xb7();
    void compare_a_b_0xb8();
    void compare_a_c_0xb9();
    void compare_a_d_0xba();
    void compare_a_e_0xbb();
    void compare_a_h_0xbc();
    void compare_a_l_0xbd();
    void compare_a_memory_hl_0xbe();
    void compare_a_a_0xbf();
    void return_not_zero_0xc0();
    void pop_bc_0xc1();
    void jump_not_zero_immediate16_0xc2();
    void jump_immediate16_0xc3();
    void call_not_zero_immediate16_0xc4();
    void push_bc_0xc5();
    void add_a_immediate8_0xc6();
    void restart_0x00_0xc7();
    void return_zero_0xc8();
    void return_0xc9();
    void jump_zero_immediate16_0xca();
    // 0xcb is only used to prefix an extended instruction
    void call_zero_immediate16_0xcc();
    void call_immediate16_0xcd();
    void add_with_carry_a_immediate8_0xce();
    void restart_0x08_0xcf();
    void return_not_carry_0xd0();
    void pop_de_0xd1();
    void jump_not_carry_immediate16_0xd2();
    // 0xd3 is an unused opcode for the Game Boy
    void call_not_carry_immediate16_0xd4();
    void push_de_0xd5();
    void subtract_a_immediate8_0xd6();
};

} // namespace GameBoy
