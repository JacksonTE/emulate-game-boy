#pragma once

#include <bit>
#include <cstdint>
#include <functional>
#include "machine_cycle_interaction.h"
#include "memory_management_unit.h"
#include "register_file.h"

namespace GameBoy {

constexpr uint8_t INSTRUCTION_PREFIX_BYTE = 0xcb;

enum class InterruptMasterEnableState {
    Disabled,
    WillEnable,
    Enabled
};

class CPU {
public:
    CPU(MemoryManagementUnit &memory_management_unit, std::function<void(MachineCycleInteraction)> emulator_step_single_machine_cycle_callback);

    void reset_state();
    void set_post_boot_state();

    void step_single_instruction();
    void step_single_machine_cycle();

    RegisterFile<std::endian::native> get_register_file() const;
    void set_register_file_state(const RegisterFile<std::endian::native> &new_register_values);
    void print_register_file_state() const;

private:
    std::function<void(MachineCycleInteraction)> emulator_step_single_machine_cycle;
    MemoryManagementUnit &memory_interface;
    RegisterFile<std::endian::native> register_file;
    uint64_t elapsed_cycle_count{};
    InterruptMasterEnableState interrupt_master_enable_ime{InterruptMasterEnableState::Disabled};
    uint8_t instruction_register_ir{};
    bool is_instruction_prefixed{};
    bool is_stopped{};
    bool is_halted{};

    void execute_next_instruction_and_fetch();
    void fetch_next_instruction();
    void service_interrupt();
    uint8_t get_pending_interrupt_mask();

    uint8_t read_byte_and_tick(uint16_t address);
    void write_byte_and_tick(uint16_t address, uint8_t value);
    uint8_t fetch_immediate8_and_tick();
    uint16_t fetch_immediate16_and_tick();

    using InstructionPointer = void (CPU:: *)();
    static const InstructionPointer instruction_table[0x100];
    static const InstructionPointer prefixed_instruction_table[0x100];

    // Instruction Helpers
    void update_flag(uint8_t flag_mask, bool new_flag_state);
    bool is_flag_set(uint8_t flag_mask) const;

    void increment_register16(uint16_t &register16);
    void decrement_register16(uint16_t &register16);
    void add_hl_register16(const uint16_t &register16);
    void increment_uint8(uint8_t &uint8);
    void decrement_uint8(uint8_t &uint8);
    void add_a_uint8(const uint8_t &uint8);
    void add_with_carry_a_uint8(const uint8_t &uint8);
    void subtract_a_uint8(const uint8_t &uint8);
    void subtract_with_carry_a_uint8(const uint8_t &uint8);
    void and_a_uint8(const uint8_t &uint8);
    void xor_a_uint8(const uint8_t &uint8);
    void or_a_uint8(const uint8_t &uint8);
    void compare_a_uint8(const uint8_t &uint8);
    void jump_relative_conditional_signed_immediate8(bool is_condition_met);
    void jump_conditional_immediate16(bool is_condition_met);
    uint16_t pop_stack();
    void push_stack_register16(const uint16_t &register16);
    void call_conditional_immediate16(bool is_condition_met);
    void return_conditional(bool is_condition_met);
    void restart_at_address(uint16_t address);

    void rotate_left_circular_uint8(uint8_t &uint8);
    void rotate_right_circular_uint8(uint8_t &uint8);
    void rotate_left_through_carry_uint8(uint8_t &uint8);
    void rotate_right_through_carry_uint8(uint8_t &uint8);
    void shift_left_arithmetic_uint8(uint8_t &uint8);
    void shift_right_arithmetic_uint8(uint8_t &uint8);
    void swap_nibbles_uint8(uint8_t &uint8);
    void shift_right_logical_uint8(uint8_t &uint8);
    void test_bit_position_uint8(uint8_t bit_position_to_test, const uint8_t &uint8);
    void test_bit_position_memory_hl(uint8_t bit_position_to_test);
    void reset_bit_position_memory_hl(uint8_t bit_position_to_reset);
    void set_bit_position_memory_hl(uint8_t bit_position_to_set);

    // Instructions suffixed with their opcode
    void unused_opcode();
    void no_operation_0x00();
    void load_bc_immediate16_0x01();
    void load_memory_bc_a_0x02();
    void increment_bc_0x03();
    void increment_b_0x04();
    void decrement_b_0x05();
    void load_b_immediate8_0x06();
    void rotate_left_circular_a_0x07();
    void load_memory_immediate16_stack_pointer_0x08();
    void add_hl_bc_0x09();
    void load_a_memory_bc_0x0a();
    void decrement_bc_0x0b();
    void increment_c_0x0c();
    void decrement_c_0x0d();
    void load_c_immediate8_0x0e();
    void rotate_right_circular_a_0x0f();
    void stop_0x10();
    void load_de_immediate16_0x11();
    void load_memory_de_a_0x12();
    void increment_de_0x13();
    void increment_d_0x14();
    void decrement_d_0x15();
    void load_d_immediate8_0x16();
    void rotate_left_through_carry_a_0x17();
    void jump_relative_signed_immediate8_0x18();
    void add_hl_de_0x19();
    void load_a_memory_de_0x1a();
    void decrement_de_0x1b();
    void increment_e_0x1c();
    void decrement_e_0x1d();
    void load_e_immediate8_0x1e();
    void rotate_right_through_carry_a_0x1f();
    void jump_relative_if_not_zero_signed_immediate8_0x20();
    void load_hl_immediate16_0x21();
    void load_memory_post_increment_hl_a_0x22();
    void increment_hl_0x23();
    void increment_h_0x24();
    void decrement_h_0x25();
    void load_h_immediate8_0x26();
    void decimal_adjust_a_0x27();
    void jump_relative_if_zero_signed_immediate8_0x28();
    void add_hl_hl_0x29();
    void load_a_memory_post_increment_hl_0x2a();
    void decrement_hl_0x2b();
    void increment_l_0x2c();
    void decrement_l_0x2d();
    void load_l_immediate8_0x2e();
    void complement_a_0x2f();
    void jump_relative_if_not_carry_signed_immediate8_0x30();
    void load_stack_pointer_immediate16_0x31();
    void load_memory_post_decrement_hl_a_0x32();
    void increment_stack_pointer_0x33();
    void increment_memory_hl_0x34();
    void decrement_memory_hl_0x35();
    void load_memory_hl_immediate8_0x36();
    void set_carry_flag_0x37();
    void jump_relative_if_carry_signed_immediate8_0x38();
    void add_hl_stack_pointer_0x39();
    void load_a_memory_post_decrement_hl_0x3a();
    void decrement_stack_pointer_0x3b();
    void increment_a_0x3c();
    void decrement_a_0x3d();
    void load_a_immediate8_0x3e();
    void complement_carry_flag_0x3f();
    void load_b_b_0x40();
    void load_b_c_0x41();
    void load_b_d_0x42();
    void load_b_e_0x43();
    void load_b_h_0x44();
    void load_b_l_0x45();
    void load_b_memory_hl_0x46();
    void load_b_a_0x47();
    void load_c_b_0x48();
    void load_c_c_0x49();
    void load_c_d_0x4a();
    void load_c_e_0x4b();
    void load_c_h_0x4c();
    void load_c_l_0x4d();
    void load_c_memory_hl_0x4e();
    void load_c_a_0x4f();
    void load_d_b_0x50();
    void load_d_c_0x51();
    void load_d_d_0x52();
    void load_d_e_0x53();
    void load_d_h_0x54();
    void load_d_l_0x55();
    void load_d_memory_hl_0x56();
    void load_d_a_0x57();
    void load_e_b_0x58();
    void load_e_c_0x59();
    void load_e_d_0x5a();
    void load_e_e_0x5b();
    void load_e_h_0x5c();
    void load_e_l_0x5d();
    void load_e_memory_hl_0x5e();
    void load_e_a_0x5f();
    void load_h_b_0x60();
    void load_h_c_0x61();
    void load_h_d_0x62();
    void load_h_e_0x63();
    void load_h_h_0x64();
    void load_h_l_0x65();
    void load_h_memory_hl_0x66();
    void load_h_a_0x67();
    void load_l_b_0x68();
    void load_l_c_0x69();
    void load_l_d_0x6a();
    void load_l_e_0x6b();
    void load_l_h_0x6c();
    void load_l_l_0x6d();
    void load_l_memory_hl_0x6e();
    void load_l_a_0x6f();
    void load_memory_hl_b_0x70();
    void load_memory_hl_c_0x71();
    void load_memory_hl_d_0x72();
    void load_memory_hl_e_0x73();
    void load_memory_hl_h_0x74();
    void load_memory_hl_l_0x75();
    void halt_0x76();
    void load_memory_hl_a_0x77();
    void load_a_b_0x78();
    void load_a_c_0x79();
    void load_a_d_0x7a();
    void load_a_e_0x7b();
    void load_a_h_0x7c();
    void load_a_l_0x7d();
    void load_a_memory_hl_0x7e();
    void load_a_a_0x7f();
    void add_a_b_0x80();
    void add_a_c_0x81();
    void add_a_d_0x82();
    void add_a_e_0x83();
    void add_a_h_0x84();
    void add_a_l_0x85();
    void add_a_memory_hl_0x86();
    void add_a_a_0x87();
    void add_with_carry_a_b_0x88();
    void add_with_carry_a_c_0x89();
    void add_with_carry_a_d_0x8a();
    void add_with_carry_a_e_0x8b();
    void add_with_carry_a_h_0x8c();
    void add_with_carry_a_l_0x8d();
    void add_with_carry_a_memory_hl_0x8e();
    void add_with_carry_a_a_0x8f();
    void subtract_a_b_0x90();
    void subtract_a_c_0x91();
    void subtract_a_d_0x92();
    void subtract_a_e_0x93();
    void subtract_a_h_0x94();
    void subtract_a_l_0x95();
    void subtract_a_memory_hl_0x96();
    void subtract_a_a_0x97();
    void subtract_with_carry_a_b_0x98();
    void subtract_with_carry_a_c_0x99();
    void subtract_with_carry_a_d_0x9a();
    void subtract_with_carry_a_e_0x9b();
    void subtract_with_carry_a_h_0x9c();
    void subtract_with_carry_a_l_0x9d();
    void subtract_with_carry_a_memory_hl_0x9e();
    void subtract_with_carry_a_a_0x9f();
    void and_a_b_0xa0();
    void and_a_c_0xa1();
    void and_a_d_0xa2();
    void and_a_e_0xa3();
    void and_a_h_0xa4();
    void and_a_l_0xa5();
    void and_a_memory_hl_0xa6();
    void and_a_a_0xa7();
    void xor_a_b_0xa8();
    void xor_a_c_0xa9();
    void xor_a_d_0xaa();
    void xor_a_e_0xab();
    void xor_a_h_0xac();
    void xor_a_l_0xad();
    void xor_a_memory_hl_0xae();
    void xor_a_a_0xaf();
    void or_a_b_0xb0();
    void or_a_c_0xb1();
    void or_a_d_0xb2();
    void or_a_e_0xb3();
    void or_a_h_0xb4();
    void or_a_l_0xb5();
    void or_a_memory_hl_0xb6();
    void or_a_a_0xb7();
    void compare_a_b_0xb8();
    void compare_a_c_0xb9();
    void compare_a_d_0xba();
    void compare_a_e_0xbb();
    void compare_a_h_0xbc();
    void compare_a_l_0xbd();
    void compare_a_memory_hl_0xbe();
    void compare_a_a_0xbf();
    void return_if_not_zero_0xc0();
    void pop_stack_bc_0xc1();
    void jump_if_not_zero_immediate16_0xc2();
    void jump_immediate16_0xc3();
    void call_if_not_zero_immediate16_0xc4();
    void push_stack_bc_0xc5();
    void add_a_immediate8_0xc6();
    void restart_at_0x00_0xc7();
    void return_if_zero_0xc8();
    void return_0xc9();
    void jump_if_zero_immediate16_0xca();
    // 0xcb is only used to prefix an extended instruction
    void call_if_zero_immediate16_0xcc();
    void call_immediate16_0xcd();
    void add_with_carry_a_immediate8_0xce();
    void restart_at_0x08_0xcf();
    void return_if_not_carry_0xd0();
    void pop_stack_de_0xd1();
    void jump_if_not_carry_immediate16_0xd2();
    // 0xd3 is an unused opcode
    void call_if_not_carry_immediate16_0xd4();
    void push_stack_de_0xd5();
    void subtract_a_immediate8_0xd6();
    void restart_at_0x10_0xd7();
    void return_if_carry_0xd8();
    void return_from_interrupt_0xd9();
    void jump_if_carry_immediate16_0xda();
    // 0xdb is an unused opcode
    void call_if_carry_immediate16_0xdc();
    // 0xdb is an unused opcode
    void subtract_with_carry_a_immediate8_0xde();
    void restart_at_0x18_0xdf();
    void load_memory_high_ram_offset_immediate8_a_0xe0();
    void pop_stack_hl_0xe1();
    void load_memory_high_ram_offset_c_a_0xe2();
    // 0xe3 is an unused opcode
    // 0xe4 is an unused opcode
    void push_stack_hl_0xe5();
    void and_a_immediate8_0xe6();
    void restart_at_0x20_0xe7();
    void add_stack_pointer_signed_immediate8_0xe8();
    void jump_hl_0xe9();
    void load_memory_immediate16_a_0xea();
    // 0xeb is an unused opcode
    // 0xec is an unused opcode
    // 0xed is an unused opcode
    void xor_a_immediate8_0xee();
    void restart_at_0x28_0xef();
    void load_a_memory_high_ram_offset_immediate8_0xf0();
    void pop_stack_af_0xf1();
    void load_a_memory_high_ram_offset_c_0xf2();
    void disable_interrupts_0xf3();
    // 0xf4 is an unused opcode
    void push_stack_af_0xf5();
    void or_a_immediate8_0xf6();
    void restart_at_0x30_0xf7();
    void load_hl_stack_pointer_with_signed_offset_0xf8();
    void load_stack_pointer_hl_0xf9();
    void load_a_memory_immediate16_0xfa();
    void enable_interrupts_0xfb();
    // 0xfc is an unused opcode
    // 0xfd is an unused opcode
    void compare_a_immediate8_0xfe();
    void restart_at_0x38_0xff();

    void rotate_left_circular_b_0xcb_0x00();
    void rotate_left_circular_c_0xcb_0x01();
    void rotate_left_circular_d_0xcb_0x02();
    void rotate_left_circular_e_0xcb_0x03();
    void rotate_left_circular_h_0xcb_0x04();
    void rotate_left_circular_l_0xcb_0x05();
    void rotate_left_circular_memory_hl_0xcb_0x06();
    void rotate_left_circular_a_0xcb_0x07();
    void rotate_right_circular_b_0xcb_0x08();
    void rotate_right_circular_c_0xcb_0x09();
    void rotate_right_circular_d_0xcb_0x0a();
    void rotate_right_circular_e_0xcb_0x0b();
    void rotate_right_circular_h_0xcb_0x0c();
    void rotate_right_circular_l_0xcb_0x0d();
    void rotate_right_circular_memory_hl_0xcb_0x0e();
    void rotate_right_circular_a_0xcb_0x0f();
    void rotate_left_through_carry_b_0xcb_0x10();
    void rotate_left_through_carry_c_0xcb_0x11();
    void rotate_left_through_carry_d_0xcb_0x12();
    void rotate_left_through_carry_e_0xcb_0x13();
    void rotate_left_through_carry_h_0xcb_0x14();
    void rotate_left_through_carry_l_0xcb_0x15();
    void rotate_left_through_carry_memory_hl_0xcb_0x16();
    void rotate_left_through_carry_a_0xcb_0x17();
    void rotate_right_through_carry_b_0xcb_0x18();
    void rotate_right_through_carry_c_0xcb_0x19();
    void rotate_right_through_carry_d_0xcb_0x1a();
    void rotate_right_through_carry_e_0xcb_0x1b();
    void rotate_right_through_carry_h_0xcb_0x1c();
    void rotate_right_through_carry_l_0xcb_0x1d();
    void rotate_right_through_carry_memory_hl_0xcb_0x1e();
    void rotate_right_through_carry_a_0xcb_0x1f();
    void shift_left_arithmetic_b_0xcb_0x20();
    void shift_left_arithmetic_c_0xcb_0x21();
    void shift_left_arithmetic_d_0xcb_0x22();
    void shift_left_arithmetic_e_0xcb_0x23();
    void shift_left_arithmetic_h_0xcb_0x24();
    void shift_left_arithmetic_l_0xcb_0x25();
    void shift_left_arithmetic_memory_hl_0xcb_0x26();
    void shift_left_arithmetic_a_0xcb_0x27();
    void shift_right_arithmetic_b_0xcb_0x28();
    void shift_right_arithmetic_c_0xcb_0x29();
    void shift_right_arithmetic_d_0xcb_0x2a();
    void shift_right_arithmetic_e_0xcb_0x2b();
    void shift_right_arithmetic_h_0xcb_0x2c();
    void shift_right_arithmetic_l_0xcb_0x2d();
    void shift_right_arithmetic_memory_hl_0xcb_0x2e();
    void shift_right_arithmetic_a_0xcb_0x2f();
    void swap_nibbles_b_0xcb_0x30();
    void swap_nibbles_c_0xcb_0x31();
    void swap_nibbles_d_0xcb_0x32();
    void swap_nibbles_e_0xcb_0x33();
    void swap_nibbles_h_0xcb_0x34();
    void swap_nibbles_l_0xcb_0x35();
    void swap_nibbles_memory_hl_0xcb_0x36();
    void swap_nibbles_a_0xcb_0x37();
    void shift_right_logical_b_0xcb_0x38();
    void shift_right_logical_c_0xcb_0x39();
    void shift_right_logical_d_0xcb_0x3a();
    void shift_right_logical_e_0xcb_0x3b() ;
    void shift_right_logical_h_0xcb_0x3c();
    void shift_right_logical_l_0xcb_0x3d();
    void shift_right_logical_memory_hl_0xcb_0x3e();
    void shift_right_logical_a_0xcb_0x3f();
    void test_bit_0_b_0xcb_0x40();
    void test_bit_0_c_0xcb_0x41();
    void test_bit_0_d_0xcb_0x42();
    void test_bit_0_e_0xcb_0x43();
    void test_bit_0_h_0xcb_0x44();
    void test_bit_0_l_0xcb_0x45();
    void test_bit_0_memory_hl_0xcb_0x46();
    void test_bit_0_a_0xcb_0x47();
    void test_bit_1_b_0xcb_0x48();
    void test_bit_1_c_0xcb_0x49();
    void test_bit_1_d_0xcb_0x4a();
    void test_bit_1_e_0xcb_0x4b();
    void test_bit_1_h_0xcb_0x4c();
    void test_bit_1_l_0xcb_0x4d();
    void test_bit_1_memory_hl_0xcb_0x4e();
    void test_bit_1_a_0xcb_0x4f();
    void test_bit_2_b_0xcb_0x50();
    void test_bit_2_c_0xcb_0x51();
    void test_bit_2_d_0xcb_0x52();
    void test_bit_2_e_0xcb_0x53();
    void test_bit_2_h_0xcb_0x54();
    void test_bit_2_l_0xcb_0x55();
    void test_bit_2_memory_hl_0xcb_0x56();
    void test_bit_2_a_0xcb_0x57();
    void test_bit_3_b_0xcb_0x58();
    void test_bit_3_c_0xcb_0x59();
    void test_bit_3_d_0xcb_0x5a();
    void test_bit_3_e_0xcb_0x5b();
    void test_bit_3_h_0xcb_0x5c();
    void test_bit_3_l_0xcb_0x5d();
    void test_bit_3_memory_hl_0xcb_0x5e();
    void test_bit_3_a_0xcb_0x5f();
    void test_bit_4_b_0xcb_0x60();
    void test_bit_4_c_0xcb_0x61();
    void test_bit_4_d_0xcb_0x62();
    void test_bit_4_e_0xcb_0x63();
    void test_bit_4_h_0xcb_0x64();
    void test_bit_4_l_0xcb_0x65();
    void test_bit_4_memory_hl_0xcb_0x66();
    void test_bit_4_a_0xcb_0x67();
    void test_bit_5_b_0xcb_0x68();
    void test_bit_5_c_0xcb_0x69();
    void test_bit_5_d_0xcb_0x6a();
    void test_bit_5_e_0xcb_0x6b();
    void test_bit_5_h_0xcb_0x6c();
    void test_bit_5_l_0xcb_0x6d();
    void test_bit_5_memory_hl_0xcb_0x6e();
    void test_bit_5_a_0xcb_0x6f();
    void test_bit_6_b_0xcb_0x70();
    void test_bit_6_c_0xcb_0x71();
    void test_bit_6_d_0xcb_0x72();
    void test_bit_6_e_0xcb_0x73();
    void test_bit_6_h_0xcb_0x74();
    void test_bit_6_l_0xcb_0x75();
    void test_bit_6_memory_hl_0xcb_0x76();
    void test_bit_6_a_0xcb_0x77();
    void test_bit_7_b_0xcb_0x78();
    void test_bit_7_c_0xcb_0x79();
    void test_bit_7_d_0xcb_0x7a();
    void test_bit_7_e_0xcb_0x7b();
    void test_bit_7_h_0xcb_0x7c();
    void test_bit_7_l_0xcb_0x7d();
    void test_bit_7_memory_hl_0xcb_0x7e();
    void test_bit_7_a_0xcb_0x7f();
    void reset_bit_0_b_0xcb_0x80();
    void reset_bit_0_c_0xcb_0x81();
    void reset_bit_0_d_0xcb_0x82();
    void reset_bit_0_e_0xcb_0x83();
    void reset_bit_0_h_0xcb_0x84();
    void reset_bit_0_l_0xcb_0x85();
    void reset_bit_0_memory_hl_0xcb_0x86();
    void reset_bit_0_a_0xcb_0x87();
    void reset_bit_1_b_0xcb_0x88();
    void reset_bit_1_c_0xcb_0x89();
    void reset_bit_1_d_0xcb_0x8a();
    void reset_bit_1_e_0xcb_0x8b();
    void reset_bit_1_h_0xcb_0x8c();
    void reset_bit_1_l_0xcb_0x8d();
    void reset_bit_1_memory_hl_0xcb_0x8e();
    void reset_bit_1_a_0xcb_0x8f();
    void reset_bit_2_b_0xcb_0x90();
    void reset_bit_2_c_0xcb_0x91();
    void reset_bit_2_d_0xcb_0x92();
    void reset_bit_2_e_0xcb_0x93();
    void reset_bit_2_h_0xcb_0x94();
    void reset_bit_2_l_0xcb_0x95();
    void reset_bit_2_memory_hl_0xcb_0x96();
    void reset_bit_2_a_0xcb_0x97();
    void reset_bit_3_b_0xcb_0x98();
    void reset_bit_3_c_0xcb_0x99();
    void reset_bit_3_d_0xcb_0x9a();
    void reset_bit_3_e_0xcb_0x9b();
    void reset_bit_3_h_0xcb_0x9c();
    void reset_bit_3_l_0xcb_0x9d();
    void reset_bit_3_memory_hl_0xcb_0x9e();
    void reset_bit_3_a_0xcb_0x9f();
    void reset_bit_4_b_0xcb_0xa0();
    void reset_bit_4_c_0xcb_0xa1();
    void reset_bit_4_d_0xcb_0xa2();
    void reset_bit_4_e_0xcb_0xa3();
    void reset_bit_4_h_0xcb_0xa4();
    void reset_bit_4_l_0xcb_0xa5();
    void reset_bit_4_memory_hl_0xcb_0xa6();
    void reset_bit_4_a_0xcb_0xa7();
    void reset_bit_5_b_0xcb_0xa8();
    void reset_bit_5_c_0xcb_0xa9();
    void reset_bit_5_d_0xcb_0xaa();
    void reset_bit_5_e_0xcb_0xab();
    void reset_bit_5_h_0xcb_0xac();
    void reset_bit_5_l_0xcb_0xad();
    void reset_bit_5_memory_hl_0xcb_0xae();
    void reset_bit_5_a_0xcb_0xaf();
    void reset_bit_6_b_0xcb_0xb0();
    void reset_bit_6_c_0xcb_0xb1();
    void reset_bit_6_d_0xcb_0xb2();
    void reset_bit_6_e_0xcb_0xb3();
    void reset_bit_6_h_0xcb_0xb4();
    void reset_bit_6_l_0xcb_0xb5();
    void reset_bit_6_memory_hl_0xcb_0xb6();
    void reset_bit_6_a_0xcb_0xb7();
    void reset_bit_7_b_0xcb_0xb8();
    void reset_bit_7_c_0xcb_0xb9();
    void reset_bit_7_d_0xcb_0xba();
    void reset_bit_7_e_0xcb_0xbb();
    void reset_bit_7_h_0xcb_0xbc();
    void reset_bit_7_l_0xcb_0xbd();
    void reset_bit_7_memory_hl_0xcb_0xbe();
    void reset_bit_7_a_0xcb_0xbf();
    void set_bit_0_b_0xcb_0xc0();
    void set_bit_0_c_0xcb_0xc1();
    void set_bit_0_d_0xcb_0xc2();
    void set_bit_0_e_0xcb_0xc3();
    void set_bit_0_h_0xcb_0xc4();
    void set_bit_0_l_0xcb_0xc5();
    void set_bit_0_memory_hl_0xcb_0xc6();
    void set_bit_0_a_0xcb_0xc7();
    void set_bit_1_b_0xcb_0xc8();
    void set_bit_1_c_0xcb_0xc9();
    void set_bit_1_d_0xcb_0xca();
    void set_bit_1_e_0xcb_0xcb();
    void set_bit_1_h_0xcb_0xcc();
    void set_bit_1_l_0xcb_0xcd();
    void set_bit_1_memory_hl_0xcb_0xce();
    void set_bit_1_a_0xcb_0xcf();
    void set_bit_2_b_0xcb_0xd0();
    void set_bit_2_c_0xcb_0xd1();
    void set_bit_2_d_0xcb_0xd2();
    void set_bit_2_e_0xcb_0xd3();
    void set_bit_2_h_0xcb_0xd4();
    void set_bit_2_l_0xcb_0xd5();
    void set_bit_2_memory_hl_0xcb_0xd6();
    void set_bit_2_a_0xcb_0xd7();
    void set_bit_3_b_0xcb_0xd8();
    void set_bit_3_c_0xcb_0xd9();
    void set_bit_3_d_0xcb_0xda();
    void set_bit_3_e_0xcb_0xdb();
    void set_bit_3_h_0xcb_0xdc();
    void set_bit_3_l_0xcb_0xdd();
    void set_bit_3_memory_hl_0xcb_0xde();
    void set_bit_3_a_0xcb_0xdf();
    void set_bit_4_b_0xcb_0xe0();
    void set_bit_4_c_0xcb_0xe1();
    void set_bit_4_d_0xcb_0xe2();
    void set_bit_4_e_0xcb_0xe3();
    void set_bit_4_h_0xcb_0xe4();
    void set_bit_4_l_0xcb_0xe5();
    void set_bit_4_memory_hl_0xcb_0xe6();
    void set_bit_4_a_0xcb_0xe7();
    void set_bit_5_b_0xcb_0xe8();
    void set_bit_5_c_0xcb_0xe9();
    void set_bit_5_d_0xcb_0xea();
    void set_bit_5_e_0xcb_0xeb();
    void set_bit_5_h_0xcb_0xec();
    void set_bit_5_l_0xcb_0xed();
    void set_bit_5_memory_hl_0xcb_0xee();
    void set_bit_5_a_0xcb_0xef();
    void set_bit_6_b_0xcb_0xf0();
    void set_bit_6_c_0xcb_0xf1();
    void set_bit_6_d_0xcb_0xf2();
    void set_bit_6_e_0xcb_0xf3();
    void set_bit_6_h_0xcb_0xf4();
    void set_bit_6_l_0xcb_0xf5();
    void set_bit_6_memory_hl_0xcb_0xf6();
    void set_bit_6_a_0xcb_0xf7();
    void set_bit_7_b_0xcb_0xf8();
    void set_bit_7_c_0xcb_0xf9();
    void set_bit_7_d_0xcb_0xfa();
    void set_bit_7_e_0xcb_0xfb();
    void set_bit_7_h_0xcb_0xfc();
    void set_bit_7_l_0xcb_0xfd();
    void set_bit_7_memory_hl_0xcb_0xfe();
    void set_bit_7_a_0xcb_0xff();
};

} // namespace GameBoy
